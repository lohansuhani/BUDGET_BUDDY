<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Budget Tracker</title>
    <link rel="stylesheet" href="/public/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="light">
    <div class="navbar">
        <h1>
            <img src="https://cdn-icons-png.flaticon.com/512/891/891407.png" alt="Logo">
            Smart Budget Tracker
        </h1>
        <button class="theme-toggle" onclick="toggleTheme()">Dark Mode</button>
    </div>
    <div class="container">
        <% if (typeof body === 'undefined') { %>
            <!-- Sample Content -->
            <p>Welcome to the Smart Budget Tracker! This is a sample page with functional buttons.</p>
            
            <div class="expense-list">
                <h2>Sample Expenses</h2>
                <div id="expenseList">
                    <!-- Populated dynamically -->
                </div>
            </div>

            <div class="chart-section">
                <h2>Sample Spending Breakdown</h2>
                <canvas id="expenseChart" width="400" height="400"></canvas>
            </div>

            <script>
                // Sample data to initialize
                const sampleExpenses = [
                    { _id: 'sample1', category: 'Food', amount: 500, paymentMethod: 'Cash', date: new Date() },
                    { _id: 'sample2', category: 'Transport', amount: 200, paymentMethod: 'UPI', date: new Date() }
                ];

                async function initializeSampleExpenses() {
                    for (const exp of sampleExpenses) {
                        await fetch('/api/expenses/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                amount: exp.amount,
                                category: exp.category,
                                paymentMethod: exp.paymentMethod
                            })
                        });
                    }
                    fetchSampleExpenses();
                }

                async function fetchSampleExpenses() {
                    const response = await fetch('/api/expenses');
                    const expenses = await response.json();
                    displayExpenses(expenses);
                    renderChart(expenses);
                }

                function displayExpenses(expenses) {
                    const expenseList = document.getElementById('expenseList');
                    expenseList.innerHTML = expenses.map(exp => `
                        <div class="expense-item" data-id="${exp._id}">
                            <span>
                                <img src="${exp.category === 'Food' ? 'https://cdn-icons-png.flaticon.com/512/3571/3571506.png' : 'https://cdn-icons-png.flaticon.com/512/3094/3094856.png'}" alt="${exp.category}">
                                ${exp.category}: â‚¹${exp.amount} (${exp.paymentMethod}) - ${new Date(exp.date).toDateString()}
                            </span>
                            <div>
                                <button onclick="editExpense('${exp._id}')">Edit</button>
                                <button onclick="deleteExpense('${exp._id}')">Delete</button>
                            </div>
                        </div>
                    `).join('') || '<p>No expenses yet.</p>';
                }

                async function editExpense(id) {
                    const amount = prompt('Enter new amount', '');
                    const category = prompt('Enter new category', '');
                    const paymentMethod = prompt('Enter new payment method', '');
                    if (amount && category && paymentMethod) {
                        const response = await fetch(`/api/expenses/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ amount, category, paymentMethod })
                        });
                        if (response.ok) fetchSampleExpenses();
                    }
                }

                async function deleteExpense(id) {
                    const response = await fetch(`/api/expenses/${id}`, {
                        method: 'DELETE'
                    });
                    if (response.ok) fetchSampleExpenses();
                }

                function renderChart(expenses) {
                    const ctx = document.getElementById('expenseChart').getContext('2d');
                    const categories = [...new Set(expenses.map(exp => exp.category))];
                    const data = categories.map(cat => 
                        expenses.filter(exp => exp.category === cat).reduce((sum, exp) => sum + exp.amount, 0)
                    );
                    new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: categories,
                            datasets: [{
                                data: data,
                                backgroundColor: ['#FF6384', '#36A2EB', '#F1C40F', '#2ECC71', '#9B59B6']
                            }]
                        },
                        options: { responsive: true }
                    });
                }

                // Theme Toggle
                function toggleTheme() {
                    const body = document.body;
                    const button = document.querySelector('.theme-toggle');
                    if (body.classList.contains('light')) {
                        body.classList.remove('light');
                        body.classList.add('dark');
                        button.textContent = 'Light Mode';
                    } else {
                        body.classList.remove('dark');
                        body.classList.add('light');
                        button.textContent = 'Dark Mode';
                    }
                }

                // Initialize
                window.onload = () => {
                    initializeSampleExpenses();
                };
            </script>
        <% } else { %>
            <%- include(body + '.ejs') %>
        <% } %>
    </div>
    <script src="/frontend/public/script.js"></script>
</body>
</html>